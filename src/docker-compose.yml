services:
  # Prometheus Configuration
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alert.rules:/etc/prometheus/alert.rules
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - tumdexNetwork
    restart: always
    env_file:
      - .env
  
  # Grafana Configuration  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/datasources
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - tumdexNetwork
    depends_on:
      - prometheus
    restart: always
    env_file:
      - .env
  
  # PostgreSQL Configuration
  postgresql:
    image: postgres:latest
    container_name: postgresql
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - tumdexNetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    env_file:
      - .env
  
  # Redis Configuration  
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD} --bind 0.0.0.0 --protected-mode no --appendonly yes --port 6379
    volumes:
      - redis-data:/data
    networks:
      - tumdexNetwork
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    env_file:
      - .env
  
  # RedisInsight Configuration
 
  # RabbitMQ Configuration
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - tumdexNetwork
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    env_file:
      - .env
  
  # Seq Configuration
  seq:
    image: datalust/seq:latest
    container_name: seq
    ports:
      - "${SEQ_PORT:-5341}:80"
    environment:
      - ACCEPT_EULA=Y
      - SEQ_API_KEY=${SEQ_API_KEY}
    volumes:
      - seq-data:/data
    networks:
      - tumdexNetwork
    restart: always
    env_file:
      - .env

volumes:
  prometheus-data:
  grafana-data:
  postgres-data:
  redis-data:
  rabbitmq-data:
  seq-data:

networks:
  tumdexNetwork:
    driver: bridge